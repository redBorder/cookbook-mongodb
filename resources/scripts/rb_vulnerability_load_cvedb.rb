#!/usr/bin/env ruby
# encoding: utf-8

require "fileutils"
require "open3"
class CVEDatabase

  attr_accessor :cve_files
  MONGO_PATH = "/usr/bin/mongo"

  def initialize
    # Production
    @download_path = "/tmp/"

    @cve_url_files = []
    @cve_files = []
    @cve_mongo_files = []

    set_cve_files
  end

  def check_mongo
    File.exist?(MONGO_PATH)
  end

  def check_centos_version
    if File.exist?("/etc/centos-release")
      version = File.read("/etc/centos-release").strip!
      version.include?("CentOS Linux release 7") ?  "centos-7" : "centos-6"
    else
      "Not a centos version"
    end
  end

  def check_is_running(service, os)
    case os
    when "centos-6"
      service_status = `service #{service} status`
      service_status.include?("is running...")
    when "centos-7"
      service_status = `systemctl is-active #{service}`
      service_status.include?("active")
    else
      false
    end
  end

  def set_cve_files
    current_year = Time.new.year
    for year in 2002..current_year
      cve_url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-" + year.to_s + ".json.gz"
      @cve_url_files.push(cve_url)
    end
  end

  def import_cve_files
    complete_download = true
    @cve_url_files.each do |url_file|
      puts "Downloading NVD (MITRE) JSON CVEs file " + url_file.to_s
      file = @download_path + url_file.split("/").last
      puts file
      puts "curl -k -o #{file} #{url_file}"	 
      `curl -k -o #{file} #{url_file}`

      # If file was not download then we should not do anything..
      complete_download = false if !File.exist?(file)
      break unless complete_download

      `gunzip -f #{file}`
      file_json = file.split(".gz").first()
      `dos2unix #{file_json}`
      @cve_files.push(file_json)
    end

    if complete_download
      transform
      import_to_mongodb
    end

    remove_files
    return complete_download
  end

  def transform
    puts "\nTransforming CVE files by years into decades."
    puts "\n"
    name_code = @download_path + "CVE-" + @cve_files[0].split("-").last
    `echo "[" > #{name_code}`
    `echo "  {" >> #{name_code}`
    @cve_files.each do |filename|
      puts "Transform file: " + filename
      year = filename.split("-").last.split(".json").first
      if year[-1] == '0'
        name_code = @download_path + "CVE-" + year + ".json"
        `echo "[" > #{name_code}`
        `echo "  {" >> #{name_code}`
      end
      `n=$(wc -l #{filename} | awk '{print $1}') && head -$((${n}-1)) #{filename} | tail -$((${n}-8)) >> #{name_code}`
      if year[-1] == '9' or filename == @cve_files.last
        `echo "  }" >> #{name_code}`
        `echo "]" >> #{name_code}`
        @cve_mongo_files.push(name_code)
        puts "Transformed and added to " + name_code
      else
        `echo "  }, {" >> #{name_code}`
      end
    end
  end

  # Database in mongo = cvedb
  def import_to_mongodb
    files_list = @cve_mongo_files.join(' ')
    puts "\nImporting locally the decades CVE files: " + files_list.to_s
    puts "\n"
    @cve_mongo_files.each do |import_file|
      file_name_path = import_file.split("/").last()
      file_name = file_name_path.split(".json").first()
      cmd = "mongoimport --db cvedb --collection #{file_name} --drop --bypassDocumentValidation --file #{import_file} --numInsertionWorkers 100 --jsonArray"
      # TODO: move this function to a common helper
      puts "Importing CVE files into Mongodb"
      Open3.popen3(cmd) do |_stdin, stdout, stderr, _wait_thr|
        puts stdout.read
        puts stderr.read
      end
    end
  end

  def remove_files
    puts "\nCleaning temporary files."
    puts "\n"
    (@cve_files + @cve_mongo_files).each do |cve_file|
      File.delete(cve_file) if File.exist?(cve_file)
    end
  end

end

def create_update_log
  `echo $(date) > /tmp/rb_vulnerability_load_cvedb_last_update`
end

def delete_update_log
  `rm -f /tmp/rb_vulnerability_load_cvedb_last_update`
end

puts "Cleaning last update log file" 
delete_update_log

import = false
bd = CVEDatabase.new
if bd.check_mongo
  if bd.check_is_running("mongod", bd.check_centos_version)
    start_time = Time.now
    import = bd.import_cve_files
    end_time = Time.now
    puts "UPDATE DB process duration: " + (end_time - start_time).to_s + " seconds."
    puts "\n"
  else
    puts "Mongod Service is stopped"
  end
else
  puts "Mongo is not installed"
end

puts "Creating last update log"
create_update_log if import
