#!/usr/bin/env ruby

require 'fileutils'
class CVEDatabase
  attr_accessor :cve_files
  MONGO_PATH = '/usr/bin/mongosh'.freeze

  def initialize
    # Production
    @download_path = '/tmp/'

    @cve_url_files = []
    @cve_files = []
    @cve_mongo_files = []

    set_cve_files
  end

  def check_mongo
    File.exist?(MONGO_PATH)
  end

  def check_rocky_version
    if File.exist?('/etc/rocky-release')
      version = File.read('/etc/rocky-release').strip!
      return 'rocky-9' if version.include?('Rocky Linux release 9')
    else
      'Not a Rocky Linux Version'
    end
  end

  def check_is_running(service, os)
    if (os == 'rocky-9')
      `systemctl is-active #{service}`.chomp == 'active'
    else
      false
    end
  end

  def set_cve_files
    current_year = Time.new.year
    (2002..current_year).each do |year|
      cve_url = 'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-' + year.to_s + '.json.gz'
      @cve_url_files.push(cve_url)
    end
  end

  def import_cve_files
    complete_download = true
    @cve_url_files.each do |url_file|
      puts 'Downloading NVD (MITRE) JSON CVEs file ' + url_file.to_s
      file = @download_path + url_file.split('/').last
      puts file
      puts "curl -k -o #{file} #{url_file}"
      `curl -k -o #{file} #{url_file}`

      # If file was not download then we should not do anything..
      complete_download = false unless File.exist?(file)
      break unless complete_download

      `gunzip -f #{file}`
      file_json = file.split('.gz').first()
      `dos2unix #{file_json}`
      @cve_files.push(file_json)
    end

    if complete_download
      transform
      import_to_mongodb
    end

    remove_files

    complete_download
  end

  def transform
    puts ''
    puts 'Transforming CVE files by years into decades.'
    name_code = @download_path + 'CVE-' + @cve_files[0].split('-').last
    `echo '[' > #{name_code}`
    `echo '  {' >> #{name_code}`
    @cve_files.each do |filename|
      puts 'Transform file: ' + filename
      year = filename.split('-').last.split('.json').first
      if year[-1] == '0'
        name_code = @download_path + 'CVE-' + year + '.json'
        `echo '[' > #{name_code}`
        `echo '  {' >> #{name_code}`
      end
      `n=$(wc -l #{filename} | awk '{print $1}') && head -$((${n}-1)) #{filename} | tail -$((${n}-8)) >> #{name_code}`
      if year[-1] == '9' || filename == @cve_files.last
        `echo '  }' >> #{name_code}`
        `echo ']' >> #{name_code}`
        @cve_mongo_files.push(name_code)
        puts 'Transformed and added to ' + name_code
      else
        `echo '  }, {' >> #{name_code}`
      end
    end
  end

  # Database in mongo = cvedb
  def import_to_mongodb
    files_list = @cve_mongo_files.join(' ')
    puts ''
    puts 'Importing locally the decades CVE files: ' + files_list.to_s
    @cve_mongo_files.each do |import_file|
      file_name_path = import_file.split('/').last()
      file_name = file_name_path.split('.json').first()
      # TODO: Check what happens if mongoimport gets interrupted
      log = `mongoimport --db cvedb --collection #{file_name} --drop --bypassDocumentValidation --file #{import_file} --numInsertionWorkers 100 --jsonArray`
      if log.include?('error connecting to host')  # This error is thrown when the mongo is stopped during the import
        puts 'ERROR: Mongo import failed because of the connection'
        exit 1
      end
      if log.include?('Failed: error processing document')
        puts 'ERROR: Mongo import failed to process a document'
        exit 1
      end
      end
    end
  end

  def remove_files
    puts ''
    puts 'Cleaning temporary files.'
    @cve_files.each do |cve_file|
      File.delete(cve_file) if File.exist?(cve_file)
    end
    @cve_mongo_files.each do |cve_file|
      File.delete(cve_file) if File.exist?(cve_file)
    end
  end

def create_update_log
  `echo $(date) > /tmp/rb_vulnerability_load_cvedb_last_update`
end

def delete_update_log
  `rm -f /tmp/rb_vulnerability_load_cvedb_last_update`
end

puts 'Cleaning last update log file'
delete_update_log

import = false
bd = CVEDatabase.new
if bd.check_mongo
  if bd.check_is_running('mongod', bd.check_rocky_version)
    start_time = Time.now
    import = bd.import_cve_files
    end_time = Time.now
    puts ''
    puts 'UPDATE DB process duration: ' + (end_time - start_time).to_s + ' seconds.'
  else
    puts 'ERROR: Mongod Service is stopped'
    exit 1
  end
else
  puts 'ERROR: Mongo is not installed'
  exit 1
end

puts ''
puts 'Creating last update log'
create_update_log if import
